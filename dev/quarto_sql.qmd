---
title: "quarto_sql"
format: html
editor: visual
---

```{r}
#|label: setup
library("DBI")
library(dplyr)
drv <- duckdb::duckdb(dbdir = here::here("duck.db"))
con <-  dbConnect(drv)
```

## Schema

```{sql connection=con}

CREATE SEQUENCE id_sequence INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;

CREATE TABLE dict_units(
  id_unit INTEGER PRIMARY KEY DEFAULT(nextval('id_sequence')),
  unit VARCHAR NOT NULL UNIQUE
  );

CREATE TABLE sample_categories(
  id_category INTEGER PRIMARY KEY DEFAULT(nextval('id_sequence')),
  category VARCHAR NOT NULL UNIQUE
);

CREATE TABLE suppliers(
  id_supplier INTEGER PRIMARY KEY DEFAULT(nextval('id_sequence')),
  supplier VARCHAR NOT NULL UNIQUE
);

CREATE TABLE samples(
  id_sample INTEGER PRIMARY KEY DEFAULT(nextval('id_sequence')),
  id_category INTEGER,
  FOREIGN KEY (id_category) REFERENCES sample_categories(id_category)
  );

CREATE TABLE supplier_references(
  id_supplier INTEGER,
  reference VARCHAR,
  description VARCHAR,
  FOREIGN KEY (id_supplier) REFERENCES suppliers(id_supplier),
  PRIMARY KEY(id_supplier, reference)
);

CREATE TABLE supplier_lots(
  id_sample INTEGER PRIMARY KEY,
  id_supplier INTEGER,
  reference VARCHAR,
  lot VARCHAR,
  date_manufacture DATE,
  date_expiry DATE,
  FOREIGN KEY (id_sample) REFERENCES samples(id_sample),
  UNIQUE(id_supplier, reference, lot),
  FOREIGN KEY (id_supplier, reference) REFERENCES supplier_references(id_supplier, reference)
);

CREATE TABLE sample_mixtures(
  id_sample INTEGER PRIMARY KEY,
  date DATE,
  FOREIGN KEY (id_sample) REFERENCES samples(id_sample)
);

CREATE TABLE mixture_components(
  id_sample INTEGER,
  id_component INTEGER,
  quantity FLOAT NOT NULL,
  id_unit INTEGER,
  FOREIGN KEY (id_sample) REFERENCES sample_mixtures(id_sample),
  FOREIGN KEY (id_component) REFERENCES samples(id_sample),
  FOREIGN KEY (id_unit) REFERENCES dict_units(id_unit)
);

CREATE TABLE sample_others(
  id_sample INTEGER PRIMARY KEY,
  description VARCHAR NOT NULL,
  FOREIGN KEY (id_sample) REFERENCES samples(id_sample)
);

CREATE TABLE lot_changes (
    original_id_supplier INTEGER,
    original_reference VARCHAR,
    original_lot VARCHAR,
    new_id_supplier INTEGER,
    new_reference VARCHAR,
    new_lot VARCHAR,
    FOREIGN KEY (original_id_supplier, original_reference, original_lot) REFERENCES supplier_lots(id_supplier, reference, lot),
    FOREIGN KEY (new_id_supplier, new_reference, new_lot) REFERENCES supplier_lots(id_supplier, reference, lot)
);
```

## INSERTS

```{sql connection=con}

INSERT INTO sample_categories(category) VALUES ('supplier')
```

```{r}
DBI::dbWithTransaction(
  con,
  {
     id_sample <- DBI::dbGetQuery(
       con,
       "INSERT INTO samples(id_category) VALUES (8) RETURNING id_sample"
       )
     
     child_query <- glue::glue_sql(
      "INSERT INTO supplier_lots VALUES (",
      id_sample$id_sample,
      ", 7, 'CAL 2351', 'RandoxRef1Lot1', '2021-01-01', '2024-01-31')"
    )
    DBI::dbSendQuery(con, child_query)
  }
)
```

## Disconnect

```{r}

DBI::dbDisconnect(con, shutdown = TRUE)
```

## Drop table

```{sql connection=con}
DROP TABLE dict_units
```
