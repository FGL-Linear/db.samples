---
title: "quarto_sql"
format: html
editor: visual
---

```{r}
#|label: setup
library("DBI")
library(dplyr)
drv <- duckdb::duckdb(dbdir = here::here("duck.db"))
con <-  dbConnect(drv)
```

## Schema

```{sql connection=con}

CREATE SEQUENCE id_sequence INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;

CREATE TABLE dict_units(
  id_unit INTEGER PRIMARY KEY DEFAULT(nextval('id_sequence')),
  unit VARCHAR NOT NULL UNIQUE
  );

CREATE TABLE sample_categories(
  id_category INTEGER PRIMARY KEY DEFAULT(nextval('id_sequence')),
  category VARCHAR NOT NULL UNIQUE
);

CREATE TABLE suppliers(
  id_supplier INTEGER PRIMARY KEY DEFAULT(nextval('id_sequence')),
  supplier VARCHAR NOT NULL UNIQUE
);

CREATE TABLE samples(
  id_sample INTEGER PRIMARY KEY DEFAULT(nextval('id_sequence')),
  id_category INTEGER,
  FOREIGN KEY (id_category) REFERENCES sample_categories(id_category)
  );

CREATE TABLE supplier_references(
  id_supplier INTEGER,
  reference VARCHAR,
  description VARCHAR,
  FOREIGN KEY (id_supplier) REFERENCES suppliers(id_supplier),
  PRIMARY KEY(id_supplier, reference)
);

CREATE TABLE supplier_lots(
  id_sample INTEGER PRIMARY KEY,
  id_supplier INTEGER,
  reference VARCHAR,
  lot VARCHAR,
  date_manufacture DATE,
  date_expiry DATE,
  FOREIGN KEY (id_sample) REFERENCES samples(id_sample),
  UNIQUE(id_supplier, reference, lot),
  FOREIGN KEY (id_supplier, reference) REFERENCES supplier_references(id_supplier, reference)
);

CREATE TABLE sample_mixtures(
  id_sample INTEGER PRIMARY KEY,
  date DATE,
  FOREIGN KEY (id_sample) REFERENCES samples(id_sample)
);

CREATE TABLE mixture_components(
  id_sample INTEGER,
  id_component INTEGER,
  quantity FLOAT NOT NULL,
  id_unit INTEGER,
  FOREIGN KEY (id_sample) REFERENCES sample_mixtures(id_sample),
  FOREIGN KEY (id_component) REFERENCES samples(id_sample),
  FOREIGN KEY (id_unit) REFERENCES dict_units(id_unit)
);

CREATE TABLE sample_others(
  id_sample INTEGER PRIMARY KEY,
  description VARCHAR NOT NULL,
  FOREIGN KEY (id_sample) REFERENCES samples(id_sample)
);

CREATE TABLE lot_changes (
    original_id_supplier INTEGER,
    original_reference VARCHAR,
    original_lot VARCHAR,
    new_id_supplier INTEGER,
    new_reference VARCHAR,
    new_lot VARCHAR,
    FOREIGN KEY (original_id_supplier, original_reference, original_lot) REFERENCES supplier_lots(id_supplier, reference, lot),
    FOREIGN KEY (new_id_supplier, new_reference, new_lot) REFERENCES supplier_lots(id_supplier, reference, lot)
);
```

## Import

```{r}
xlsx_path <- here::here("dev", "db samples.xlsx")
suppliers <- readxl::read_excel(xlsx_path, sheet = "suppliers")
supplier_references <- readxl::read_excel(xlsx_path, sheet = "supplier_references")
supplier_lots <- readxl::read_excel(xlsx_path, sheet = "supplier_lots")
lot_changes <- readxl::read_excel(xlsx_path, sheet = "lot_changes")
sample_categories <- readxl::read_excel(xlsx_path, sheet = "sample_categories")
samples <- readxl::read_excel(xlsx_path, sheet = "samples")
sample_others <- readxl::read_excel(xlsx_path, sheet = "sample_others")

DBI::dbAppendTable(con, "sample_categories", sample_categories)
DBI::dbAppendTable(con, "samples", samples)
DBI::dbAppendTable(con, "sample_others", sample_others)
DBI::dbAppendTable(con, "suppliers", suppliers)
DBI::dbAppendTable(con, "supplier_references", supplier_references)
DBI::dbAppendTable(con, "supplier_lots", supplier_lots)
DBI::dbAppendTable(con, "lot_changes", lot_changes)
```

## INSERTS

```{r}
DBI::dbWithTransaction(
  con,
  {
     id_sample <- DBI::dbGetQuery(
       con,
       "INSERT INTO samples(id_category) VALUES (8) RETURNING id_sample"
       )
     
     child_query <- glue::glue_sql(
      "INSERT INTO supplier_lots VALUES (",
      id_sample$id_sample,
      ", 7, 'CAL 2351', 'RandoxRef1Lot1', '2021-01-01', '2024-01-31')"
    )
    DBI::dbSendQuery(con, child_query)
  }
)
```

## Disconnect

```{r}

DBI::dbDisconnect(con, shutdown = TRUE)
```

## Drop table

```{sql connection=con}
DROP TABLE dict_units
```

## (Untested) ChatGPT query to find original lot

**Note**: It may be a good idea to try and enforce that for any new lot change this query is run first to directly link the new lot to the original lot in the chain.

you can find the original lot for any given lot by traversing the chain of transformations recursively. You can achieve this with a recursive common table expression (CTE) in SQL. Here's how you can build a query to find the original lot for a given lot:

```{sql connection=con}

WITH RECURSIVE LotChain AS (
    -- Anchor query: Start with the given lot
    SELECT original_id_supplier, original_reference, original_lot, new_id_supplier, new_reference, new_lot
    FROM lot_changes
    WHERE new_id_supplier = 1  -- Specify the ID of the given lot
      AND new_reference = 1985099     -- Specify the reference of the given lot
      AND new_lot = 19250           -- Specify the lot number of the given lot
  UNION ALL
    -- Recursive query: Traverse the chain of transformations
    SELECT lc.original_id_supplier, lc.original_reference, lc.original_lot, lc.new_id_supplier, lc.new_reference, lc.new_lot
    FROM LotChain AS l
    JOIN lot_changes AS lc
    ON l.original_id_supplier = lc.new_id_supplier
       AND l.original_reference = lc.new_reference
       AND l.original_lot = lc.new_lot
)
-- Query to find the original lot
SELECT original_id_supplier, original_reference, original_lot
FROM LotChain
ORDER BY original_id_supplier, original_reference, original_lot
LIMIT 1;

```

In this query:

-   Replace **`?`** with the ID, reference, and lot number of the given lot for which you want to find the original lot.

-   The **`LotChain`** CTE recursively traverses the chain of transformations starting from the given lot.

-   The anchor query selects the initial lot specified by the given ID, reference, and lot number.

-   The recursive query joins the **`LotChain`** with the **`lot_changes`** table to find the previous transformation for each lot in the chain.

-   The final query selects the original lot from the **`LotChain`** CTE and orders the results by supplier ID, reference, and lot number. It limits the result to only the first original lot found.

This query will provide you with the original lot for a given lot, even if it has undergone multiple transformations.
